// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"I5x/zT3B64/r/wUAAP//NHSMnVFhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
