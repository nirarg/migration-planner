// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
